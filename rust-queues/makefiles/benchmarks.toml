extend = [
    {path = "msq_benchmarks.toml"},
    {path = "lprq_benchmarks.toml"}
]

# Pairwise benchmarking, threads varies, fixed operations
[tasks.parameter-scan-pairwise-threads]
description = "Hyperfine parameter scan over threads"
script = [
    "export OUTPUT=${RESULT_DIR}/${FILE}",
    "export MAX_THREADS=$(($(nproc) / $FACTOR))",
    "echo '\n'===========================================",
    "echo Parameter scan over threads",
    "echo ' ' Benchmark: $TARGET",
    "echo ' ' Interval: [1, ${MAX_THREADS}]",
    "echo ' ' Operations: 10^${LOGN}",
    "echo ' ' Even cores: ${EVEN_CORES}",
    "echo ' ' Congestion: ${CONGESTION}'\n'",
    "hyperfine --parameter-scan Threads 1 ${MAX_THREADS} '${BINARY} {Threads} ${LOGN} ${EVEN_CORES} ${CONGESTION}' --export-json ${OUTPUT}"
]
private = true

# MPMC benchmark, thread varies, fixed operations
[tasks.parameter-scan-mpmc]
description = "Base MPMC benchmark parameter scan"
script_runner = "bash"
script = [
    # Extract how many iterations hyperfine will execute run for each ratio, also min & max threads.
    '''
    max_threads=$(($(nproc) / $FACTOR))

    # Extract the multipliers from the ratio
    IFS=':' read producer_multiplier consumer_multiplier <<< "$RATIO"

    min_threads=$((producer_multiplier + consumer_multiplier))
    iterations=$(($max_threads / $min_threads))

    export MAX_THREADS=$max_threads
    export MIN_THREADS=$min_threads
    export ITERATIONS=$iterations
    export PROD_MULTI=$producer_multiplier
    export CONS_MULTI=$consumer_multiplier
    ''',

    "echo '\n'===========================================",
    "echo Parameter scan over threads",
    "echo ' ' Benchmark: $TARGET",
    "echo ' ' Interval: [${MIN_THREADS}, ${MAX_THREADS}]",
    "echo ' ' Operations: 10^${LOGN}",
    "echo ' ' Even cores: ${EVEN_CORES}",
    "echo ' ' Congestion: ${CONGESTION}'\n'",
    "bash ${SCRIPT_DIR}/ratio_benchmarks.sh ${PROD_MULTI} ${CONS_MULTI} ${ITERATIONS} ${FILE} ${CONGESTION}"

]
private = true

# MPMC energy consumption benchmark
[tasks.energy-consumption]
description = "Measure the energy consumption of the LPRQ"
script_runner = "bash"
script = [
    # Extract the maximum allowed producer and consumer based on ratio
    ''' 
    max_threads=$(($(nproc) / $FACTOR))

    # Extract the multipliers from the ratio
    IFS=':' read producer_multiplier consumer_multiplier <<< "$RATIO"

    # Temporary fix for 2:1 ratio benchmarks until bug is fixed
    if [[ $RATIO == "2:1" ]]; then
        producers="20"
        consumers="10"

    # Calculate maximum amount of producers & consumers for the ratio
    else
        min_threads=$((producer_multiplier + consumer_multiplier))
        base=$(($max_threads / $min_threads))

        producers=$(($base * producer_multiplier))
        consumers=$(($base * consumer_multiplier))
    fi

    export PROD=$producers
    export CONS=$consumers
    ''',

    "export OUTPUT=${RESULT_DIR}/${FILE}",
    "echo '\n'===========================================",
    "echo Energy consumption benchmark",
    "echo ' ' Benchmark: $TARGET",
    "echo ' ' Runs: ${RUNS}",
    "echo ' ' Producers: ${PROD}",
    "echo ' ' Consumers: ${CONS}",
    "echo ' ' Operations: 10^${LOGN}",
    "echo ' ' Even cores: ${EVEN_CORES}",
    "echo ' ' Congestion: ${CONGESTION}'\n'",
    "perf stat -r ${RUNS} -e ${EVENTS} -o ${OUTPUT} ${BINARY} ${PROD} ${CONS} ${LOGN} ${EVEN_CORES} ${CONGESTION} >/dev/null"
]
private = true

# Congestion benchmark
[tasks.paramter-scan-congestion]
description = "Hyperfine parameter scan over congestions"
script = [
    "export THREADS=$(($(nproc) / $FACTOR))",
    "echo '\n'===========================================",
    "echo Parameter scan over congestions",
    "echo ' ' Benchmark: $TARGET",
    "echo ' ' Congestions: [0.0, 0.25, 1.0]",
    "echo ' ' Operations: 10^${LOGN}",
    "echo ' ' Threads: ${THREADS}",
    "echo ' ' Even cores: ${EVEN_CORES}",
    "bash ${SCRIPT_DIR}/congestion_benchmarks.sh ${WORKLOAD} ${FILE}"]
private = true